openapi: 3.0.0
info:
  title: Selly Evi | E-commerce API
  description: API documentation for Selly Evi, a fictional E-commerce API
  contact:
    name: TYNIP | Arturo Morales
    url: https://artmoram.com/
  version: 1.0.0
servers:
  - url: https://sellyevi-e-commerce-app.onrender.com
tags:
  - name: Authentication
    description: Operations related to user authentication
  - name: Carts
    description: Operations related to user shopping carts
  - name: Orders
    description: Operations related to user orders
  - name: Products
    description: Operations related to products
  - name: Users
    description: Operations related to user management
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserInput'
      responses:
        '200':
          description: User registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '5XX':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Authentication
  /auth/login:
    post:
      summary: Login with username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: User login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '5XX':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Authentication
  /auth/google:
    get:
      summary: Login with Google
      responses:
        '200':
          description: User login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '5XX':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Authentication
  /auth/logged_in:
    get:
      summary: Check if user is logged in
      responses:
        '200':
          description: User is logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '5XX':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Authentication
  /auth/logout:
    get:
      summary: Logout user
      responses:
        '200':
          description: User logged out successfully
        '5XX':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Authentication
  /carts/cart:
    get:
      tags:
        - Carts
      summary: Get user cart
      responses:
        '200':
          description: User cart retrieved successfully
    put:
      tags:
        - Carts
      summary: Update user cart
      responses:
        '200':
          description: User cart updated successfully
    post:
      tags:
        - Carts
      summary: Create user cart
      responses:
        '200':
          description: User cart created successfully
  /carts/cart/items:
    post:
      tags:
        - Carts
      summary: Add item to user cart
      responses:
        '200':
          description: Item added to user cart successfully
  /carts/cart/items/{cartItemId}:
    put:
      tags:
        - Carts
      summary: Update item from user cart
      parameters:
        - name: cartItemId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Item updated in user cart successfully
    delete:
      tags:
        - Carts
      summary: Delete item from user cart
      parameters:
        - name: cartItemId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Item deleted from user cart successfully
  /carts/cart/checkout:
    post:
      tags:
        - Carts
      summary: Checkout user cart
      responses:
        '200':
          description: User cart checked out successfully
  /orders:
    get:
      tags:
        - Orders
      summary: Get user orders
      responses:
        '200':
          description: User orders retrieved successfully
  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Find user order
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: User order found successfully
  /products:
    get:
      tags:
        - Products
      summary: Get user products
      responses:
        '200':
          description: User products retrieved successfully
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Find user product
      parameters:
        - name: productId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: User product found successfully
  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: User retrieved successfully
    put:
      tags:
        - Users
      summary: Update user info
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: User info updated successfully
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
      required:
        - email
        - firstname
        - lastname

    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
      required:
        - name
        - price

    Cart:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        created:
          type: string
        modified:
          type: string
        converted:
          type: string
        isActive:
          type: boolean
      required:
        - userId

    CartItem:
      type: object
      properties:
        id:
          type: integer
        productId:
          type: integer
        cartId:
          type: integer
        quantity:
          type: integer
        price:
          type: number
      required:
        - productId
        - cartId
        - quantity
        - price

    Order:
      type: object
      properties:
        id:
          type: integer
        total:
          type: number
        status:
          type: string
        userId:
          type: integer
        created:
          type: string
        modified:
          type: string
      required:
        - total
        - status
        - userId

    OrderItem:
      type: object
      properties:
        id:
          type: integer
        quantity:
          type: integer
        orderId:
          type: integer
        productId:
          type: integer
        price:
          type: number
      required:
        - quantity
        - orderId
        - productId
        - price

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer

  security:
    - BasicAuth: []
    - BearerAuth: []

definitions:
  CartItem:
    type: object
    properties:
      id:
        type: integer
      product_id:
        type: integer
      cart_id:
        type: integer
      quantity:
        type: integer
  Cart:
    type: object
    properties:
      id:
        type: integer
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      converted:
        type: string
        format: date-time
      isActive:
        type: boolean
  OrderItem:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      price:
        type: number
      quantity:
        type: integer
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
  Order:
    type: object
    properties:
      id:
        type: integer
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      status:
        type: string
      total:
        type: number
      user_id:
        type: integer
  Product:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      price:
        type: number
  User:
    type: object
    properties:
      id:
        type: integer
      email:
        type: string
      password:
        type: string
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
